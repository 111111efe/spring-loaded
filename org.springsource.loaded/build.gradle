group = "org.springsource.loaded"
version = '1.1.1-dev'
jar.baseName = 'spring-loaded'

compileJava {
	options.debug = true
}

configurations {
	testCompileOnly
}

dependencies {
	tools 'com.googlecode.jarjar:jarjar:1.3'

	compile 'asm:asm-all:3.2'
	
	testCompile 'junit:junit:4.11'
	
	testCompileOnly files("../org.springsource.loaded.testdata.groovy/groovy-1.8.2.jar")
	testCompileOnly project(':org.springsource.loaded.testdata')
	testCompileOnly project(':org.springsource.loaded.testdata.groovy')
	testCompileOnly project(':org.springsource.loaded.testdata.plugin')
	testCompileOnly project(':org.springsource.loaded.testdata.subloader')
	testCompileOnly project(':org.springsource.loaded.testdata.superloader')
}

sourceSets {  
    test {  
        compileClasspath += configurations.testCompileOnly  
    }  
}  

test {
	jvmArgs "-noverify"
	//debug true
	systemProperties["springloaded.tests.useGradleBuildDir"] = true
	systemProperties["springloaded.tests.generatedTests"] = false
}

task jarAll(type: Jar, dependsOn: jar) {
	manifest {
		attributes(
				"Specification-Vendor": "SpringSource",
				"Specification-Title": "SpringLoaded Agent",
				"Specification-Version": version,
				"Implementation-Vendor": "SpringSource",
				"Implementation-Title": "org.springsource.loaded",
				"Implementation-Version": version,
				"Premain-Class": "org.springsource.loaded.agent.SpringLoadedAgent",
				"Can-Redefine-Classes": "true"
				)
	}
	
    inputs.files jar.archivePath
    classifier = 'agent'
	
    doLast {
        project.ant {
            taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.tools.asPath
            jarjar(jarfile: archivePath, manifest: "$temporaryDir/MANIFEST.MF") {
                zipfileset(src: jar.archivePath)
                configurations.compile.files.each { jarjarFile ->
                    zipfileset(src: jarjarFile)
                }
                rule pattern: "org.objectweb.asm.**", result: "sl.org.objectweb.asm.@1"
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn:classes) {     
	classifier = 'sources'     
	from sourceSets.main.allSource 
}

// add the jars as artifacts
artifacts {      
	archives sourcesJar      
	archives jarAll
}
